# Generated by Django 3.2.9 on 2021-12-06 03:14

import bot.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CallbackMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handler_id', models.PositiveSmallIntegerField()),
                ('group_id', models.BigIntegerField()),
                ('fn', picklefield.fields.PickledObjectField(editable=False)),
                ('args', picklefield.fields.PickledObjectField(editable=False)),
                ('kwargs', picklefield.fields.PickledObjectField(editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('santa', 'Santa'), ('saint_nicholas', 'Saint Nicholas')], default='santa', max_length=256)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Register opened'), (1, 'Register closed'), (2, 'Participants are already distributed')], default=0)),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(max_length=2048)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wishes', models.TextField(blank=True, null=True)),
                ('messages_as_santa', models.JSONField(default=list)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='participants', to='bot.event')),
                ('secret_good_buddy', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secret_santa', to='bot.participant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ForwardMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(encoder=bot.models.JSONEncoder)),
                ('from_participant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sent_messages', to='bot.participant')),
                ('to_participant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='received_messages', to='bot.participant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('is_bot', models.BooleanField(default=False)),
                ('full_name', models.CharField(blank=True, max_length=256, null=True)),
                ('username', models.CharField(blank=True, max_length=256, null=True)),
                ('language_code', models.CharField(blank=True, max_length=10, null=True)),
                ('bot_can_message', models.BooleanField(default=True)),
                ('is_telegram_user', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='tg_user', serialize=False, to='bot.authuser')),
                ('active_participant', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='_active_user', to='bot.participant')),
            ],
            options={
                'ordering': ['full_name'],
            },
        ),
        migrations.AddField(
            model_name='participant',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='participants', to='bot.user'),
        ),
        migrations.AddField(
            model_name='event',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='admin_events', to='bot.user'),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.BigIntegerField()),
                ('date', models.BigIntegerField()),
                ('content_type', models.CharField(max_length=64)),
                ('data', models.JSONField(encoder=bot.models.JSONEncoder)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='messages', to='bot.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='messages', to='bot.user')),
            ],
            options={
                'ordering': ['message_id'],
                'unique_together': {('message_id', 'user')},
            },
        ),
    ]
